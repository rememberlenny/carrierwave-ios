#
# Uncrustify Configuration File
# File Created With UncrustifyX 0.4.3 (252)
#

# Alignment
# ---------

## Alignment

# Align ObjC declaration params on colon
align_oc_decl_colon                     = true          # boolean (false/true)

# Blank Lines
# -----------

## Newline Count After

# Newline count after function body
nl_after_func_body                      = 2             # number

## Other

# Remove blank lines after open brace
eat_blanks_after_open_brace             = true          # boolean (false/true)

# Remove blank lines before close brace
eat_blanks_before_close_brace           = true          # boolean (false/true)

# General
# -------

## Other

# Input tab size
input_tab_size                          = 4             # number

# Interpret >=
tok_split_gte                           = false         # boolean (false/true)

# Newline character
newlines                                = lf            # string (auto/cr/crlf/lf)

# Output tab size
output_tab_size                         = 4             # number

# String escape character
string_escape_char                      = 92            # number

# String escape character 2
string_escape_char2                     = 0             # number

# Indentation
# -----------

## Indentation

# Disable indenting class braces
indent_braces_no_class                  = false         # boolean (false/true)

# Disable indenting function braces
indent_braces_no_func                   = false         # boolean (false/true)

# Disable indenting struct braces
indent_braces_no_struct                 = false         # boolean (false/true)

# Double indent size for Indentation options
indent_func_param_double                = false         # boolean (false/true)

# Indent ObjC block
indent_oc_block                         = true          # boolean (false/true)

# Indent braces
indent_braces                           = false         # boolean (false/true)

# Indent class body
indent_class                            = false         # boolean (false/true)

# Indent class variable constructors
indent_func_ctor_var_param              = false         # boolean (false/true)

# Indent continued function call parameters
indent_func_call_param                  = false         # boolean (false/true)

# Indent function call parameters in class declarations
indent_func_class_param                 = false         # boolean (false/true)

# Indent function definition parameters
indent_func_def_param                   = false         # boolean (false/true)

# Indent function prototype parameters
indent_func_proto_param                 = false         # boolean (false/true)

# Indent template parameters
indent_template_param                   = false         # boolean (false/true)

## Indentation Size

# Indent size based on brace parent
indent_brace_parent                     = false         # boolean (false/true)

# Indentation column size
indent_columns                          = 4             # number

# Indentation size between case and switch
indent_switch_case                      = 4             # number

# Indentation size for ObjC blocks in a message parameter
indent_oc_block_msg                     = 0             # number

# Indentation size for ObjC message subsequent parameters
indent_oc_msg_colon                     = 0             # number

# Indentation size for multi-line XML strings
indent_xml_string                       = 0             # number

# Indentation size for namespace block
indent_namespace_level                  = 0             # number

# Indentation size for throw function declaration
indent_func_throw                       = 0             # number

# Indentation size of brace after case
indent_case_brace                       = 0             # number

# Indentation size of case
indent_case_shift                       = 0             # number

# Indentation size of single line comments
indent_sing_line_comments               = 0             # number

## Limits

# Namespace indentation limit
indent_namespace_limit                  = 0             # number

## Other

# Align continued statements at equals
indent_align_assign                     = true          # boolean (false/true)

# Align strings broken by backslash
indent_align_string                     = false         # boolean (false/true)

# Brace indent level
indent_brace                            = 0             # number

# Continuation indent
indent_continue                         = 0             # number

# Force indentation of function definition to start in column 1
indent_func_def_force_col1              = true          # boolean (false/true)

# Indent BOOL inside parentheses
indent_bool_paren                       = false         # boolean (false/true)

# Indent access specifier
indent_access_spec                      = 1             # number

# Indent after class colon
indent_class_colon                      = false         # boolean (false/true)

# Indent code after access specifier
indent_access_spec_body                 = false         # boolean (false/true)

# Indent comma inside parentheses
indent_comma_paren                      = false         # boolean (false/true)

# Indent comments in first column
indent_col1_comment                     = true          # boolean (false/true)

# Indent comments with tabs
indent_cmt_with_tabs                    = false         # boolean (false/true)

# Indent content after open square followed by newline
indent_square_nl                        = false         # boolean (false/true)

# Indent continued member
indent_member                           = 0             # number

# Indent continued variable declarations
indent_var_def_cont                     = false         # boolean (false/true)

# Indent else\nif
indent_else_if                          = false         # boolean (false/true)

# Indent extern body
indent_extern                           = false         # boolean (false/true)

# Indent goto labels
indent_label                            = 0             # number

# Indent namespace body
indent_namespace                        = false         # boolean (false/true)

# Indent newline content after open parenthesis
indent_paren_nl                         = false         # boolean (false/true)

# Indent relative single line comments
indent_relative_single_line_comments    = false         # boolean (false/true)

# Indent with tabs
indent_with_tabs                        = 0             # number

# Indentation for const qualifier
indent_func_const                       = 0             # number

# Indentation for constructor initializer list
indent_ctor_init                        = 0             # number

# Indentation of close parenthesis after newline
indent_paren_close                      = 0             # number

# Indentation of first BOOL expression
indent_first_bool_expr                  = false         # boolean (false/true)

# Preserve SQL indentation
indent_preserve_sql                     = false         # boolean (false/true)

# Variable declaration indentation after open brace
indent_var_def_blk                      = 0             # number

# Virtual indent from colon for member initializers
indent_ctor_init_leading                = 0             # number

# Newlines
# --------

## Newline Before

# Newline before close parenthesis in function declaration
nl_func_decl_end                        = remove        # string (add/force/ignore/remove)

# Newline before close parenthesis in function definition
nl_func_def_end                         = remove        # string (add/force/ignore/remove)

## Newline Between

# Newline between close brace and else
nl_brace_else                           = remove        # string (add/force/ignore/remove)

# Newline between else and if
nl_else_if                              = remove        # string (add/force/ignore/remove)

# Newline between else and open brace
nl_else_brace                           = remove        # string (add/force/ignore/remove)

# Newline between else if and open brace
nl_elseif_brace                         = remove        # string (add/force/ignore/remove)

# Newline between enum and open brace
nl_enum_brace                           = remove        # string (add/force/ignore/remove)

# Newline between for and open brace
nl_for_brace                            = remove        # string (add/force/ignore/remove)

# Newline between function call and open brace
nl_fcall_brace                          = remove        # string (add/force/ignore/remove)

# Newline between function signature and open brace
nl_fdef_brace                           = remove        # string (add/force/ignore/remove)

# Newline between if and open brace
nl_if_brace                             = remove        # string (add/force/ignore/remove)

# Newline between struct and open brace
nl_struct_brace                         = remove        # string (add/force/ignore/remove)

# Newline between union and open brace
nl_union_brace                          = remove        # string (add/force/ignore/remove)

# Newline between while and open brace
nl_while_brace                          = remove        # string (add/force/ignore/remove)

## Splitting

# Donâ€™t split one-line braced assignments
nl_assign_leave_one_liners              = true          # boolean (false/true)

# Other
# -----

## Other

# Force encoding UTF-8
utf8_force                              = true          # boolean (false/true)

# UTF-8 byte order mark
utf8_bom                                = remove        # string (add/force/ignore/remove)

# UTF-8 output if file contains bytes > 128 and < 255
utf8_byte                               = false         # boolean (false/true)

# Spacing
# -------

## Space After

# Space after ObjC @selector parentheses
sp_after_oc_at_sel_parens               = add           # string (add/force/ignore/remove)

# Space after ObjC block caret
sp_after_oc_block_caret                 = remove        # string (add/force/ignore/remove)

# Space after ObjC colon
sp_after_oc_colon                       = remove        # string (add/force/ignore/remove)

# Space after ObjC dictionary colon
sp_after_oc_dict_colon                  = force         # string (add/force/ignore/remove)

# Space after ObjC message colon
sp_after_send_oc_colon                  = remove        # string (add/force/ignore/remove)

# Space after ObjC message receiver
sp_after_oc_msg_receiver                = force         # string (add/force/ignore/remove)

# Space after ObjC property
sp_after_oc_property                    = force         # string (add/force/ignore/remove)

# Space after ObjC return type
sp_after_oc_return_type                 = remove        # string (add/force/ignore/remove)

# Space after ObjC scope
sp_after_oc_scope                       = force         # string (add/force/ignore/remove)

# Space after ObjC type
sp_after_oc_type                        = remove        # string (add/force/ignore/remove)

# Space after pointer star
sp_after_ptr_star                       = remove        # string (add/force/ignore/remove)

# Space after preprocessor stringify operator
sp_pp_stringify                         = remove        # string (add/force/ignore/remove)

## Space Around

# Space around arithmetic operators
sp_arith                                = force         # string (add/force/ignore/remove)

# Space around assignment operator
sp_assign                               = force         # string (add/force/ignore/remove)

# Space around boolean operators
sp_bool                                 = force         # string (add/force/ignore/remove)

# Space around compare operators
sp_compare                              = force         # string (add/force/ignore/remove)

## Space Before

# Space before ObjC block caret
sp_before_oc_block_caret                = remove        # string (add/force/ignore/remove)

# Space before ObjC colon
sp_before_oc_colon                      = remove        # string (add/force/ignore/remove)

# Space before ObjC dictionary colon
sp_before_oc_dict_colon                 = remove        # string (add/force/ignore/remove)

# Space before ObjC message colon
sp_before_send_oc_colon                 = remove        # string (add/force/ignore/remove)

# Space before if/for/switch/while open parenthesis
sp_before_sparen                        = force         # string (add/force/ignore/remove)

# Space before pointer star
sp_before_ptr_star                      = force         # string (add/force/ignore/remove)

# Space before unnamed pointer star
sp_before_unnamed_ptr_star              = force         # string (add/force/ignore/remove)

## Space Between

# Space between @selector and open parenthesis
sp_after_oc_at_sel                      = remove        # string (add/force/ignore/remove)

# Space between close parenthesis and open brace
sp_paren_brace                          = remove        # string (add/force/ignore/remove)

# Space between constructor and open parenthesis
sp_func_class_paren                     = remove        # string (add/force/ignore/remove)

# Space between defined and open parenthesis
sp_defined_paren                        = remove        # string (add/force/ignore/remove)

# Space between function name and open parenthesis
sp_func_call_paren                      = remove        # string (add/force/ignore/remove)

# Space between function name and open parenthesis in declaration
sp_func_proto_paren                     = remove        # string (add/force/ignore/remove)

# Space between function name and open parenthesis in function definition
sp_func_def_paren                       = remove        # string (add/force/ignore/remove)

# Space between pointer stars
sp_between_ptr_star                     = remove        # string (add/force/ignore/remove)

# Space between type and open parenthesis in C++ cast
sp_cpp_cast_paren                       = remove        # string (add/force/ignore/remove)

# Space between user function call and open parenthesis
sp_func_call_user_paren                 = remove        # string (add/force/ignore/remove)

## Space Inside

# Space inside @selector() parens
sp_inside_oc_at_sel_parens              = remove        # string (add/force/ignore/remove)

# Space inside parentheses
sp_inside_paren                         = remove        # string (add/force/ignore/remove)
